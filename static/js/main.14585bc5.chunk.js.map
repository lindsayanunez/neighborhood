{"version":3,"sources":["components/NoDisplayMap.js","components/DisplayMap.js","components/ListDrawer.js","App.js","serviceWorker.js","index.js"],"names":["NoDisplayMap","state","show","timeout","componentDidMount","window","setTimeout","_this","displayMessage","setState","componenetWillMount","clearTimeout","react_default","a","createElement","this","Component","CLIENT_FS","SECRET_FS","FS_VERSION","DisplayMap","map","markers","markerProps","activeMarkers","activeMarkerProps","showingInfoWindow","firstDrop","componentWillReceiveProps","props","length","locations","shutInfoWindow","updateMarkers","activeMarker","selectedIndex","onMarkerClick","mapReady","forEach","marker","setMap","location","index","pProps","key","name","position","pos","url","push","console","log","google","maps","dropEffect","Animation","Drop","Marker","addListener","e","concat","lat","lng","headers","Headers","request","Request","method","fetch","then","response","json","result","restaurant","getCompanyInfo","Object","objectSpread","foursquare","id","images","photos","setAnimation","BOUNCE","data","venues","filter","item","includes","render","center","lon","apProps","dist","role","aria-label","onReady","zoom","style","width","height","initialCenter","onClick","visible","onClose","href","alt","scr","items","prefix","suffix","GoogleApiWrapper","apiKey","LoadingContainer","ListDrawer","open","query","styles","list","padding","noBullets","listStyleType","fullList","listItem","marginBottom","listLink","background","border","color","filterEntry","margin","updateQuery","newQuery","filterLocations","Drawer_default","toggleDrawer","type","placeholder","onChange","target","value","clickListItem","App","all","menuButton","left","top","marginLeft","marginRight","hide","display","header","marginTop","filtered","toLowerCase","className","components_DisplayMap","components_ListDrawer","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","src_App_0","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.14585bc5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass NoDisplayMap extends Component {\n  state = {\n    show: false,\n    timeout: null\n  };\n  //After the components have mounted, set the timeout\n  componentDidMount = () => {\n    let timeout = window.setTimeout(this.displayMessage, 1000);\n    this.setState({ timeout });\n  };\n\n  //before componenets mount clear the timeout\n  componenetWillMount = () => {\n    window.clearTimeout(this.state.timeout);\n  };\n\n  //changes state for message display\n  displayMessage = () => {\n    this.setState({ show: true });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.show ? (\n          <div>\n            <h1>Map Loading Error</h1>\n            <h2>This map will not load due to network error.</h2>\n            <p>Please, connect to the internet and try again.</p>\n          </div>\n        ) : (\n          <div>\n            <h1>Loading...</h1>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default NoDisplayMap;\n\n//Resources\n// Doug Brown's Tutorial - https://youtu.be/NVAVLCJwAAo\n","import React, { Component } from \"react\";\nimport { Map, InfoWindow, GoogleApiWrapper } from \"google-maps-react\";\nimport NoDisplayMap from \"./NoDisplayMap.js\";\n\nconst MAP_KEY = \"AIzaSyA4VBEGSFyW6fd16XxYD_buASl7pUZzaFw\";\nconst CLIENT_FS = \"OUCOLRA5EZGI34CYBNRCZHRPD0DA5VVRJOAJNCWGLTGON0LO\";\nconst SECRET_FS = \"HWPXULN0VH34HOK40IJFT1YE0HGYCFWMMCBMM4IPFQAD2OJZ\";\nconst FS_VERSION = \"20180323\";\n\nclass DisplayMap extends Component {\n  state = {\n    map: null,\n    markers: [],\n    markerProps: [],\n    activeMarkers: null,\n    activeMarkerProps: null,\n    showingInfoWindow: false,\n    firstDrop: true,\n  };\n\n  componentDidMount = () => {};\n\n  componentWillReceiveProps = props => {\n    this.setState({ firstDrop: false });\n\n    //Update the markers when the filtering of locations changes\n    if (this.state.markers.length !== props.locations.length) {\n      this.shutInfoWindow();\n      this.updateMarkers(props.locations);\n      this.setState({ activeMarker: null });\n\n      return;\n    }\n\n    //Close window if the clicked marker is not for the open info window\n    if (\n      !props.selectedIndex ||\n      (this.state.activeMarker &&\n        this.state.markers[props.selectedIndex] !== this.state.activeMarker)\n    ) {\n      this.shutInfoWindow();\n    }\n\n    //Check for a selected index\n    if (\n      props.selectedIndex === null ||\n      typeof props.selectedIndex === \"undefined\"\n    ) {\n      return;\n    }\n\n    //Marker acts as clicked\n    this.onMarkerClick(\n      this.state.markerProps[props.selectedIndex],\n      this.state.markers[props.selectedIndex]\n    );\n  };\n\n  mapReady = (props, map) => {\n    //Save the reference of the map in the state for location markers\n    this.setState({ map });\n    this.updateMarkers(this.props.locations);\n  };\n\n    updateMarkers = locations => {\n    //check to see if there are locations\n    if (!locations) return;\n    //Remove existing markers\n    this.state.markers.forEach(marker => marker.setMap(null));\n\n    //Create parallel references between the markers and the location props\n    //Add markers to the map\n\n    let markerProps = [];\n    let markers = locations.map((location, index) => {\n      let pProps = {\n        key: index,\n        index,\n        name: location.name,\n        position: location.pos,\n        url: location.url\n      };\n      markerProps.push(pProps);\n      console.log(this.props.google.maps);\n      let dropEffect = this.state.firstDrop\n        ? this.props.google.maps.Animation.Drop\n        : null;\n      let marker = new this.props.google.maps.Marker({\n        position: location.pos,\n        map: this.state.map,\n        dropEffect\n      });\n      marker.addListener(\"click\", () => {\n        this.onMarkerClick(pProps, marker, null);\n      });\n      return marker;\n    });\n    this.setState({ markers, markerProps });\n  };\n\n\n\n\n\n  onMarkerClick = (props, marker, e) => {\n    //close the open info windows\n    this.shutInfoWindow();\n\n    //Fetch the Foursquare Data\n    let url = `https://api.foursquare.com/v2/venues/search?client_id=${CLIENT_FS}&client_secret=${SECRET_FS}&v=${FS_VERSION}&radius=100&ll=${props.position.lat},${props.position.lng}&llAcc=100`;\n    let headers = new Headers();\n    let request = new Request(url, {\n      method: \"GET\",\n      headers\n    });\n\n    //Make markers for the active marker\n    let activeMarkerProps;\n    fetch(request)\n      .then(response => response.json())\n      .then(result => {\n        //Retrieve business reference for the restaurant in FS\n\n        let restaurant = this.getCompanyInfo(props, result);\n        activeMarkerProps = {\n          ...props,\n          foursquare: restaurant[0]\n        };\n        //If there is FS data, get the picture\n        //else complete setting state\n        if (activeMarkerProps.foursquare) {\n          let url = `https://api.foursquare.com/v2/venues/${\n            restaurant[0].id}/photos?client_id=${CLIENT_FS}&client_secret=${SECRET_FS}&v=${FS_VERSION}`;\n          fetch(url)\n            .then(response => response.json())\n            .then(result => {\n              activeMarkerProps = {\n                ...activeMarkerProps,\n                images: result.response.photos\n              };\n              if (this.state.activeMarker)\n                this.state.activeMarker.setAnimation(null);\n              marker.setAnimation(this.props.google.maps.Animation.BOUNCE);\n              this.setState({\n                showingInfoWindow: true,\n                activeMarker: marker,\n                activeMarkerProps\n              });\n            });\n        } else {\n          //Set the state to show the marker info\n          marker.setAnimation(this.props.google.maps.Animation.BOUNCE);\n          this.setState({\n            showingInfoWindow: true,\n            activeMarker: marker,\n            activeMarkerProps: props\n          });\n        }\n      });\n  };\n\n  getCompanyInfo = (props, data) => {\n    //comparing stored data to FS data\n    return data.response.venues.filter(\n      item => item.name.includes(props.name) || props.name.includes(item.name)\n    );\n  };\n\n  shutInfoWindow = () => {\n    this.state.activeMarker && this.state.activeMarker.setAnimation(null);\n    this.setState({\n      showingInfoWindow: false,\n      activeMarker: null,\n      activeMarkerProps: null\n    });\n  };\n\n\n  render = () => {\n    const style = {\n      width: \"100%\",\n      height: \"100%\"\n    };\n\n    const center = {\n      lat: this.props.lat,\n      lng: this.props.lon\n    };\n\n    let apProps = this.state.activeMarkerProps;\n\n    return (\n      <Map\n        role=\"application\"\n        aria-label=\"map\"\n        onReady={this.mapReady}\n        google={this.props.google}\n        zoom={this.props.zoom}\n        style={style}\n        initialCenter={center}\n        onClick={this.shutInfoWindow}>\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.shutInfoWindow}>\n          <div>\n            <h3>{apProps && apProps.name}</h3>\n            {apProps && apProps.url ? (\n              <a href={apProps.url}>Visit website</a>\n            ) : (\n              \"\"\n            )}\n            {apProps && apProps.images ? (\n              <div>\n                <img\n                  alt={\"Food Picture from \" + apProps.name}\n                  scr={\n                    apProps.images.items[0].prefix +\n                    \"100x100\" +\n                    apProps.images.items[0].suffix\n                  }/>\n                <p>Fourquare Photograph</p>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  };\n}\n\nexport default GoogleApiWrapper({\n  apiKey: MAP_KEY,\n  LoadingContainer: NoDisplayMap\n})(DisplayMap);\n\n// Resources\n// Doug Brown's Tutorial - https://youtu.be/NVAVLCJwAAo\n","import React, { Component } from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\n\nclass ListDrawer extends Component {\n  state = {\n    open: false,\n    query: \"\"\n  };\n\n  styles = {\n    list: {\n      width: \"250px\",\n      padding: \"0px 15px 0px\"\n    },\n    noBullets: {\n      listStyleType: \"none\",\n      padding: 0\n    },\n    fullList: {\n      width: \"auto\"\n    },\n    listItem: {\n      marginBottom: \"15px\"\n    },\n    listLink: {\n      background: \"transparent\",\n      border: \"none\",\n      color: \"black\"\n    },\n    filterEntry: {\n      border: \"1px solid gray\",\n      padding: \"3px\",\n      margin: \"30px 0px 10px\",\n      width: \"100%\"\n    }\n  };\n\n  updateQuery = newQuery => {\n    //save query in state and pass up\n    this.setState({ query: newQuery });\n    this.props.filterLocations(newQuery);\n  };\n\n  render = () => {\n    return (\n      <div>\n        <Drawer open={this.props.open} onClose={this.props.toggleDrawer}>\n          <div style={this.styles.list}>\n            <input\n              style={this.styles.filterEntry}\n              type=\"text\"\n              placeholder=\"Search List\"\n              name=\"filter\"\n              onChange={e => this.updateQuery(e.target.value)}\n              value={this.state.query}/>\n            <ul style={this.styles.noBullets}>\n              {this.props.locations &&\n                this.props.locations.map((location, index) => {\n                  return (\n                    <li style={this.styles.listItem} key={index}>\n                      <button\n                        style={this.styles.listLink}\n                        key={index}\n                        onClick={e => this.props.clickListItem(index)}>\n                        {location.name}\n                      </button>\n                    </li>\n                  );\n                })}\n            </ul>\n          </div>\n        </Drawer>\n      </div>\n    );\n  };\n}\n\nexport default ListDrawer;\n\n// Resources\n// Doug Brown's Tutorial - https://youtu.be/NVAVLCJwAAo\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport locations from './data/locations.json';\nimport DisplayMap from './components/DisplayMap';\nimport ListDrawer from './components/ListDrawer';\n\nclass App extends Component {\n  state = {\n    lat: 40.6782,\n    lon: -73.9442,\n    zoom: 13,\n    all: locations,\n    open: false,\n    selectedIndex: null\n  }\n\n  styles = {\n    menuButton:{\n      background: 'white',\n      position: 'absolute',\n        left: 10,\n        top: 20,\n      padding: 10,\n      marginLeft: 10,\n      marginRight: 20\n    },\n    hide: {\n      display: 'none'\n    },\n    header:{\n      marginTop: '0px'\n    }\n  };\n\ncomponentDidMount = () => {\n  this.setState({\n    ...this.state,\n    filtered: this.filterLocations(this.state.all, \"\")\n  });\n}\n\n  toggleDrawer = () => {\n    //change state to show if drawer is open or not\n    this.setState({\n      open: !this.state.open\n    });\n  }\n\n  updateQuery = (query) => {\n    //update and then filter the query value\n    this.setState({\n      ...this.state,\n      selectedIndex: null,\n      filtered: this.filterLocations(this.state.all, query)\n    });\n  }\n\n  filterLocations = (location, query) => {\n    return locations.filter(location => location.name.toLowerCase().includes(query.toLowerCase()));\n  }\n\n  clickListItem = (index) => {\n    //set state with new array of selected locations\n    this.setState({ selectedIndex: index, open: !this.state.open})\n  }\n\n  render = () => {\n    return (\n      <div className=\"App\">\n      <div style={this.styles.header}>\n        <button onClick={this.toggleDrawer} style={this.styles.menuButton}>\n          <i className=\"fa fa-bars\"></i>\n        </button>\n        <h1>Best Pizza in Brooklyn</h1>\n      </div>\n        <DisplayMap\n          lat={this.state.lat}\n          lon={this.state.lon}\n          zoom={this.state.zoom}\n          locations={this.state.filtered}\n          selectedIndex={this.state.selectedIndex}\n          clickListItem={this.clickListItem}/>\n        <ListDrawer\n          locations={this.state.filtered}\n          open={this.state.open}\n          toggleDrawer={this.toggleDrawer}\n          filterLocations={this.updateQuery}\n          clickListItem={this.clickListItem}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//Resources\n// Doug Brown's Tutorial - https://youtu.be/NVAVLCJwAAo\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n\n//Resources\n// Doug Brown's Tutorial - https://youtu.be/NVAVLCJwAAo"],"sourceRoot":""}